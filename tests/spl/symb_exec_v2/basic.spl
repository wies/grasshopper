options "-symbexec-v2"

procedure assign(x: Int, y: Int)
  requires x == 0 && y == x
  ensures x == 0 && y == x
{
  pure assert x == 0;
}

procedure assign2(x: Int, y: Int) 
  requires x == 10 && y == 5 
  ensures x == 10 && y == 5 
{
  x := 10;
  y := 5;
}

procedure pure1(x: Int)
  requires x == 0
  ensures x == 10
{
  x := 2;
  x := x + 5;
  x := x + 3;
}

procedure assume1(x: Int) 
  requires x > 0
  ensures x == 100 
{

   x := 10;
   pure assume x == 100;
}

procedure if1(x: Int, y: Int)
  requires x == 0
  ensures x > 2 
{
  if (x > 2) {
    x := 3;
  } else {
    x := x + 3;
  }
}

procedure if2(x: Int, y: Int)
  requires x == 0
  ensures x >= 3 
{
  if (x > 2) {
    x := 3;
  } else {
    pure assume x >= 3;
  }
}

procedure pure2(x: Int, y: Int)
  requires x == y
  ensures x == y + 8
{
  x := x + 5;
  x := x + 3;
}

procedure pure_swap(x: Int, y: Int)
  requires x == 0 && y == 10 
  ensures x == 10 && y == 0
{
  y, x := x, y;
}

procedure loop0(x: Int)
  requires x == 0
  ensures x == 1
{
  var i := 1;
  while (i < 2)
    invariant x == i - 1 && i <= 2
  {
    x := i;
    i := i + 1;
  }
}

struct DNode {
  var data: Int;
}

procedure loop1(x: DNode)
  requires acc(x.data) &*& x.data == 0
  ensures acc(x.data) &*& x.data == 10
{
  var i := 1;
  var y := new DNode();
  y.data := 10;
  while (i < 11)
    invariant acc(x.data) &*& acc(y.data) &*& x.data == i - 1 &*& y.data == 10 &*& i <= 11
  {
    x.data := i;
    y.data := 10;
    i := i + 1;
  }
}

struct Node {
  var next: Node;
}

procedure if3(x: Node, y: Node)
  requires acc(x.next) &*& acc(y.next)
  ensures x.next != x ? acc(y.next) &*& acc(x.next) &*& x.next == y : acc(y.next) &*& acc(x.next) &*& y.next == x 
{
  if (x.next != x) {
    x.next := y;
  }
  y.next := x;
}

procedure old1(x: Node, y: Node)
  requires acc(x.next) &*& acc(y.next)
  ensures acc(x.next) &*& x.next == old(y.next) &*& acc(y.next) &*& y.next == old(x.next)
{
  var z := x.next;
  x.next := y.next;
  y.next := z;
}
