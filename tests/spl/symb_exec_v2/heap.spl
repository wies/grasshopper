options "-symbexec-v2"

struct Node {
  var next: Node;
}

procedure lookup_heap_1(x: Node, y: Node)
  requires acc(x.next) &*& x.next == null
  ensures acc(x.next) &*& acc(y.next) &*& x.next == y
{
 y := x.next;
}

procedure lookup_heap_3(x: Node) returns (y: Node)
  requires acc(x.next) &*& x.next == null
  ensures acc(x.next) &*& acc(y.next) &*& x.next == y
{
 y := x.next;
}

procedure lookup_heap_assign(x: Node) returns (y: Node)
  requires acc(x.next) &*& x.next == null
  ensures acc(x.next) &*& acc(y.next) &*& x.next == y
{
 y := new Node();
 x.next := y;
}

procedure assign_heap(x: Node)
  requires acc(x.next) &*& x.next == null
  ensures acc(x.next) &*& x.next == x
{
  x.next := x;
  x.next := null;
  x.next := x;
}

procedure assign_heap2(x: Node, y: Node)
  requires acc(x.next) &*& x.next == null &*& acc(y.next) &*& y.next == x
  ensures acc(x.next) &*& x.next == x &*& acc(y.next) &*& y.next == null
{
  x.next := x;
  x.next := null;
  y.next := null;
  x.next := x;
}

procedure assign_heap3(x: Node, y: Node)
  requires acc(x.next) &*& x.next == null &*& acc(y.next) &*& y == x
  ensures acc(x.next) &*& x.next == x
{
  y.next := x;
}

procedure spatial_neq1(x: Node, y: Node)
  requires acc(x.next) &*& acc(y.next)
  ensures acc(x.next) &*& acc(y.next) &*& x != y
{}

procedure assign_heap4(x: Node, y: Node)
  requires acc(x.next) &*& acc(y.next) &*& x.next == y &*& x.next.next == null
  ensures acc(x.next) &*& acc(y.next) &*& x.next == y &*& y.next == x
{
  y.next := x;
}

procedure assign_heap5(x: Node, y: Node)
  requires acc(x.next) &*& x.next == y &*& acc(y.next) &*& y.next = null
  ensures acc(x.next) &*& x.next == y &*& acc(y.next) &*& y.next == x
{
  x.next.next := x;
}
