options "-symbexec-v2"

struct Node {
   var  data: Int;
   var  next: Node;
}

function f(x: Node, y: Node) returns (z: Int)
  requires acc(x.data) &*& acc(y.data)
  ensures x.data + y.data == z
{
  x.data + y.data
}

procedure add_nodes(a: Node, b: Node) returns (c: Node)
  requires acc(a.data) &*& acc(b.data)
  ensures acc(a.data) &*& acc(b.data) &*& acc(c.data) &*& c.data == a.data + b.data
{
  var z := f(a, b);
  c := new Node();
  c.data := z;
}

//Sent T an example where there is just an ite in the body, no precond ite*)
function double(b: Bool, x: Node, y: Node, z: Node) returns (r: Int)
  requires acc(x.data) &*& acc(y.data)
  requires b ? z == x : z == y
  requires x.data > 0 && y.data > 0
  ensures r >= z.data
{
  b ? x.data + z.data : y.data + z.data
}

procedure add_nodes_double_1(a: Node, b: Node) returns (r: Int) 
  requires acc(a.data) &*& acc(b.data)
  ensures acc(a.data) &*& acc(b.data) &*& r == a.data + a.data 
{
  var z := double(true, a, b, a);
  r := z;
}

function double_foo(y: Node, z: Node) returns (r: Int)
  requires acc(y.data) &*& acc(z.data)
  requires y.data > 0 && z.data > 0
  ensures r >= z.data 
{
  y.data + z.data
}

procedure add_nodes_double_2(a: Node, b: Node) returns (r: Int) 
  requires acc(a.data) &*& acc(b.data) &*& a.data > 0 && b.data > 0
  ensures acc(a.data) &*& acc(b.data) &*& r >= a.data + b.data 
{
  var z := double_foo(a, b);
  r := z;
}
